{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decompress = exports.compress = exports.uncompressibleCommands = exports.Compressor = void 0;\n\nconst zlib = require(\"zlib\");\n\nconst deps_1 = require(\"../../deps\");\n\nconst error_1 = require(\"../../error\");\n/** @public */\n\n\nexports.Compressor = Object.freeze({\n  none: 0,\n  snappy: 1,\n  zlib: 2\n});\nexports.uncompressibleCommands = new Set(['ismaster', 'saslStart', 'saslContinue', 'getnonce', 'authenticate', 'createUser', 'updateUser', 'copydbSaslStart', 'copydbgetnonce', 'copydb']); // Facilitate compressing a message using an agreed compressor\n\nfunction compress(self, dataToBeCompressed, callback) {\n  const zlibOptions = {};\n\n  switch (self.options.agreedCompressor) {\n    case 'snappy':\n      if ('kModuleError' in deps_1.Snappy) {\n        return callback(deps_1.Snappy['kModuleError']);\n      }\n\n      deps_1.Snappy.compress(dataToBeCompressed, callback);\n      break;\n\n    case 'zlib':\n      // Determine zlibCompressionLevel\n      if (self.options.zlibCompressionLevel) {\n        zlibOptions.level = self.options.zlibCompressionLevel;\n      }\n\n      zlib.deflate(dataToBeCompressed, zlibOptions, callback);\n      break;\n\n    default:\n      throw new error_1.MongoDriverError('Attempt to compress message using unknown compressor \"' + self.options.agreedCompressor + '\".');\n  }\n}\n\nexports.compress = compress; // Decompress a message using the given compressor\n\nfunction decompress(compressorID, compressedData, callback) {\n  if (compressorID < 0 || compressorID > Math.max(2)) {\n    throw new error_1.MongoDriverError(`Server sent message compressed using an unsupported compressor.` + ` (Received compressor ID ${compressorID})`);\n  }\n\n  switch (compressorID) {\n    case exports.Compressor.snappy:\n      if ('kModuleError' in deps_1.Snappy) {\n        return callback(deps_1.Snappy['kModuleError']);\n      }\n\n      deps_1.Snappy.uncompress(compressedData, {\n        asBuffer: true\n      }, callback);\n      break;\n\n    case exports.Compressor.zlib:\n      zlib.inflate(compressedData, callback);\n      break;\n\n    default:\n      callback(undefined, compressedData);\n  }\n}\n\nexports.decompress = decompress;","map":{"version":3,"sources":["../../../src/cmap/wire_protocol/compression.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,IAAA,GAAA,OAAA,CAAA,MAAA,CAAA;;AAIA,MAAA,MAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AAEA;;;AACa,OAAA,CAAA,UAAA,GAAa,MAAM,CAAC,MAAP,CAAc;AACtC,EAAA,IAAI,EAAE,CADgC;AAEtC,EAAA,MAAM,EAAE,CAF8B;AAGtC,EAAA,IAAI,EAAE;AAHgC,CAAd,CAAb;AAYA,OAAA,CAAA,sBAAA,GAAyB,IAAI,GAAJ,CAAQ,CAC5C,UAD4C,EAE5C,WAF4C,EAG5C,cAH4C,EAI5C,UAJ4C,EAK5C,cAL4C,EAM5C,YAN4C,EAO5C,YAP4C,EAQ5C,iBAR4C,EAS5C,gBAT4C,EAU5C,QAV4C,CAAR,CAAzB,C,CAab;;AACA,SAAgB,QAAhB,CACE,IADF,EAEE,kBAFF,EAGE,QAHF,EAG4B;AAE1B,QAAM,WAAW,GAAG,EAApB;;AACA,UAAQ,IAAI,CAAC,OAAL,CAAa,gBAArB;AACE,SAAK,QAAL;AACE,UAAI,kBAAkB,MAAA,CAAA,MAAtB,EAA8B;AAC5B,eAAO,QAAQ,CAAC,MAAA,CAAA,MAAA,CAAO,cAAP,CAAD,CAAf;AACD;;AACD,MAAA,MAAA,CAAA,MAAA,CAAO,QAAP,CAAgB,kBAAhB,EAAoC,QAApC;AACA;;AACF,SAAK,MAAL;AACE;AACA,UAAI,IAAI,CAAC,OAAL,CAAa,oBAAjB,EAAuC;AACrC,QAAA,WAAW,CAAC,KAAZ,GAAoB,IAAI,CAAC,OAAL,CAAa,oBAAjC;AACD;;AACD,MAAA,IAAI,CAAC,OAAL,CAAa,kBAAb,EAAiC,WAAjC,EAA8C,QAA9C;AACA;;AACF;AACE,YAAM,IAAI,OAAA,CAAA,gBAAJ,CACJ,2DACE,IAAI,CAAC,OAAL,CAAa,gBADf,GAEE,IAHE,CAAN;AAfJ;AAqBD;;AA3BD,OAAA,CAAA,QAAA,GAAA,QAAA,C,CA6BA;;AACA,SAAgB,UAAhB,CACE,YADF,EAEE,cAFF,EAGE,QAHF,EAG4B;AAE1B,MAAI,YAAY,GAAG,CAAf,IAAoB,YAAY,GAAG,IAAI,CAAC,GAAL,CAAS,CAAT,CAAvC,EAAoD;AAClD,UAAM,IAAI,OAAA,CAAA,gBAAJ,CACJ,iEAAA,GACE,4BAA4B,YAAY,GAFtC,CAAN;AAID;;AAED,UAAQ,YAAR;AACE,SAAK,OAAA,CAAA,UAAA,CAAW,MAAhB;AACE,UAAI,kBAAkB,MAAA,CAAA,MAAtB,EAA8B;AAC5B,eAAO,QAAQ,CAAC,MAAA,CAAA,MAAA,CAAO,cAAP,CAAD,CAAf;AACD;;AACD,MAAA,MAAA,CAAA,MAAA,CAAO,UAAP,CAAkB,cAAlB,EAAkC;AAAE,QAAA,QAAQ,EAAE;AAAZ,OAAlC,EAAsD,QAAtD;AACA;;AACF,SAAK,OAAA,CAAA,UAAA,CAAW,IAAhB;AACE,MAAA,IAAI,CAAC,OAAL,CAAa,cAAb,EAA6B,QAA7B;AACA;;AACF;AACE,MAAA,QAAQ,CAAC,SAAD,EAAY,cAAZ,CAAR;AAXJ;AAaD;;AAzBD,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decompress = exports.compress = exports.uncompressibleCommands = exports.Compressor = void 0;\nconst zlib = require(\"zlib\");\nconst deps_1 = require(\"../../deps\");\nconst error_1 = require(\"../../error\");\n/** @public */\nexports.Compressor = Object.freeze({\n    none: 0,\n    snappy: 1,\n    zlib: 2\n});\nexports.uncompressibleCommands = new Set([\n    'ismaster',\n    'saslStart',\n    'saslContinue',\n    'getnonce',\n    'authenticate',\n    'createUser',\n    'updateUser',\n    'copydbSaslStart',\n    'copydbgetnonce',\n    'copydb'\n]);\n// Facilitate compressing a message using an agreed compressor\nfunction compress(self, dataToBeCompressed, callback) {\n    const zlibOptions = {};\n    switch (self.options.agreedCompressor) {\n        case 'snappy':\n            if ('kModuleError' in deps_1.Snappy) {\n                return callback(deps_1.Snappy['kModuleError']);\n            }\n            deps_1.Snappy.compress(dataToBeCompressed, callback);\n            break;\n        case 'zlib':\n            // Determine zlibCompressionLevel\n            if (self.options.zlibCompressionLevel) {\n                zlibOptions.level = self.options.zlibCompressionLevel;\n            }\n            zlib.deflate(dataToBeCompressed, zlibOptions, callback);\n            break;\n        default:\n            throw new error_1.MongoDriverError('Attempt to compress message using unknown compressor \"' +\n                self.options.agreedCompressor +\n                '\".');\n    }\n}\nexports.compress = compress;\n// Decompress a message using the given compressor\nfunction decompress(compressorID, compressedData, callback) {\n    if (compressorID < 0 || compressorID > Math.max(2)) {\n        throw new error_1.MongoDriverError(`Server sent message compressed using an unsupported compressor.` +\n            ` (Received compressor ID ${compressorID})`);\n    }\n    switch (compressorID) {\n        case exports.Compressor.snappy:\n            if ('kModuleError' in deps_1.Snappy) {\n                return callback(deps_1.Snappy['kModuleError']);\n            }\n            deps_1.Snappy.uncompress(compressedData, { asBuffer: true }, callback);\n            break;\n        case exports.Compressor.zlib:\n            zlib.inflate(compressedData, callback);\n            break;\n        default:\n            callback(undefined, compressedData);\n    }\n}\nexports.decompress = decompress;\n//# sourceMappingURL=compression.js.map"]},"metadata":{},"sourceType":"script"}